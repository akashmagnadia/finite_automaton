Terminals unused in grammar

    LEFT_SQR_BRAC
    RIGHT_SQR_BRAC


Grammar

    0 $accept: program $end

    1 program: vars funcs stmts

    2 vars: vars var
    3     | %empty

    4 var: VAR NAME TYPE ASSIGN exp SEMICOLON

    5 funcs: funcs func
    6      | %empty

    7 func: FUN NAME TYPE LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC vars stmts RIGHT_BRAC

    8 argdecls: %empty
    9         | argdeclss

   10 argdeclss: argdecl
   11          | argdecl COMMA argdeclss

   12 argdecl: NAME TYPE

   13 stmts: stmts stmt
   14      | stmt

   15 stmt: RETURN exp SEMICOLON
   16     | RETURN SEMICOLON
   17     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   18     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC
   19     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   20     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC
   21     | REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   22     | NAME ASSIGN exp SEMICOLON
   23     | NAME LEFT_PAR args RIGHT_PAR SEMICOLON

   24 exp: INT_CONSTANT
   25    | STRING
   26    | exp NE exp
   27    | exp EQ exp
   28    | exp PLUS exp
   29    | exp MINUS exp
   30    | exp MUL exp
   31    | exp DIV exp
   32    | exp REM exp
   33    | exp XOR exp
   34    | exp GT exp
   35    | exp GE exp
   36    | exp LT exp
   37    | exp LE exp
   38    | exp BAND exp
   39    | exp BOR exp
   40    | exp AND exp
   41    | exp OR exp
   42    | NOT exp
   43    | LEFT_PAR exp RIGHT_PAR
   44    | NAME LEFT_PAR args RIGHT_PAR
   45    | NAME

   46 args: %empty
   47     | argss

   48 argss: exp
   49      | exp COMMA argss


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_CONSTANT <ival> (258) 24
    NAME <varName> (259) 4 7 12 22 23 44 45
    TYPE <varType> (260) 4 7 12
    STRING <string> (261) 25
    RETURN (262) 15 16
    SEMICOLON (263) 4 15 16 22 23
    VAR (264) 4
    FUN (265) 7
    REPEAT (266) 21
    IF (267) 17 18
    ELSE (268) 18
    WHILE (269) 19 20
    OTHERWISE (270) 20
    LEFT_PAR (271) 7 17 18 19 20 21 23 43 44
    RIGHT_PAR (272) 7 17 18 19 20 21 23 43 44
    LEFT_BRAC (273) 7 17 18 19 20 21
    RIGHT_BRAC (274) 7 17 18 19 20 21
    LEFT_SQR_BRAC (275)
    RIGHT_SQR_BRAC (276)
    PLUS (277) 28
    MINUS (278) 29
    MUL (279) 30
    DIV (280) 31
    REM (281) 32
    BOR (282) 39
    COMMA (283) 11 49
    BAND (284) 38
    AND (285) 40
    OR (286) 41
    XOR (287) 33
    LT (288) 36
    LE (289) 37
    GT (290) 34
    GE (291) 35
    NE (292) 26
    EQ (293) 27
    NOT (294) 42
    ASSIGN (295) 4 22


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    program (42)
        on left: 1
        on right: 0
    vars <vars> (43)
        on left: 2 3
        on right: 1 2 7
    var <var> (44)
        on left: 4
        on right: 2
    funcs <funcs> (45)
        on left: 5 6
        on right: 1 5
    func <func> (46)
        on left: 7
        on right: 5
    argdecls (47)
        on left: 8 9
        on right: 7
    argdeclss (48)
        on left: 10 11
        on right: 9 11
    argdecl (49)
        on left: 12
        on right: 10 11
    stmts <stmts> (50)
        on left: 13 14
        on right: 1 7 13 17 18 19 20 21
    stmt <stmt> (51)
        on left: 15 16 17 18 19 20 21 22 23
        on right: 13 14
    exp <exp> (52)
        on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
        on right: 4 15 17 18 19 20 21 22 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 48 49
    args <args> (53)
        on left: 46 47
        on right: 23 44
    argss <args> (54)
        on left: 48 49
        on right: 47 49


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (vars)

    program  go to state 1
    vars     go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: vars • funcs stmts
    2 vars: vars • var

    VAR  shift, and go to state 4

    $default  reduce using rule 6 (funcs)

    var    go to state 5
    funcs  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 var: VAR • NAME TYPE ASSIGN exp SEMICOLON

    NAME  shift, and go to state 7


State 5

    2 vars: vars var •

    $default  reduce using rule 2 (vars)


State 6

    1 program: vars funcs • stmts
    5 funcs: funcs • func

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    FUN     shift, and go to state 10
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    func   go to state 14
    stmts  go to state 15
    stmt   go to state 16


State 7

    4 var: VAR NAME • TYPE ASSIGN exp SEMICOLON

    TYPE  shift, and go to state 17


State 8

   22 stmt: NAME • ASSIGN exp SEMICOLON
   23     | NAME • LEFT_PAR args RIGHT_PAR SEMICOLON

    LEFT_PAR  shift, and go to state 18
    ASSIGN    shift, and go to state 19


State 9

   15 stmt: RETURN • exp SEMICOLON
   16     | RETURN • SEMICOLON

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    SEMICOLON     shift, and go to state 23
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 26


State 10

    7 func: FUN • NAME TYPE LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC vars stmts RIGHT_BRAC

    NAME  shift, and go to state 27


State 11

   21 stmt: REPEAT • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 28


State 12

   17 stmt: IF • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   18     | IF • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 29


State 13

   19 stmt: WHILE • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   20     | WHILE • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 30


State 14

    5 funcs: funcs func •

    $default  reduce using rule 5 (funcs)


State 15

    1 program: vars funcs stmts •
   13 stmts: stmts • stmt

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    $default  reduce using rule 1 (program)

    stmt  go to state 31


State 16

   14 stmts: stmt •

    $default  reduce using rule 14 (stmts)


State 17

    4 var: VAR NAME TYPE • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 32


State 18

   23 stmt: NAME LEFT_PAR • args RIGHT_PAR SEMICOLON

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    $default  reduce using rule 46 (args)

    exp    go to state 33
    args   go to state 34
    argss  go to state 35


State 19

   22 stmt: NAME ASSIGN • exp SEMICOLON

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 36


State 20

   24 exp: INT_CONSTANT •

    $default  reduce using rule 24 (exp)


State 21

   44 exp: NAME • LEFT_PAR args RIGHT_PAR
   45    | NAME •

    LEFT_PAR  shift, and go to state 37

    $default  reduce using rule 45 (exp)


State 22

   25 exp: STRING •

    $default  reduce using rule 25 (exp)


State 23

   16 stmt: RETURN SEMICOLON •

    $default  reduce using rule 16 (stmt)


State 24

   43 exp: LEFT_PAR • exp RIGHT_PAR

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 38


State 25

   42 exp: NOT • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 39


State 26

   15 stmt: RETURN exp • SEMICOLON
   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    SEMICOLON  shift, and go to state 40
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    MUL        shift, and go to state 43
    DIV        shift, and go to state 44
    REM        shift, and go to state 45
    BOR        shift, and go to state 46
    BAND       shift, and go to state 47
    AND        shift, and go to state 48
    OR         shift, and go to state 49
    XOR        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    NE         shift, and go to state 55
    EQ         shift, and go to state 56


State 27

    7 func: FUN NAME • TYPE LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC vars stmts RIGHT_BRAC

    TYPE  shift, and go to state 57


State 28

   21 stmt: REPEAT LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 58


State 29

   17 stmt: IF LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   18     | IF LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 59


State 30

   19 stmt: WHILE LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   20     | WHILE LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 60


State 31

   13 stmts: stmts stmt •

    $default  reduce using rule 13 (stmts)


State 32

    4 var: VAR NAME TYPE ASSIGN • exp SEMICOLON

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 61


State 33

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp
   48 argss: exp •
   49      | exp • COMMA argss

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    BOR    shift, and go to state 46
    COMMA  shift, and go to state 62
    BAND   shift, and go to state 47
    AND    shift, and go to state 48
    OR     shift, and go to state 49
    XOR    shift, and go to state 50
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54
    NE     shift, and go to state 55
    EQ     shift, and go to state 56

    $default  reduce using rule 48 (argss)


State 34

   23 stmt: NAME LEFT_PAR args • RIGHT_PAR SEMICOLON

    RIGHT_PAR  shift, and go to state 63


State 35

   47 args: argss •

    $default  reduce using rule 47 (args)


State 36

   22 stmt: NAME ASSIGN exp • SEMICOLON
   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    SEMICOLON  shift, and go to state 64
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    MUL        shift, and go to state 43
    DIV        shift, and go to state 44
    REM        shift, and go to state 45
    BOR        shift, and go to state 46
    BAND       shift, and go to state 47
    AND        shift, and go to state 48
    OR         shift, and go to state 49
    XOR        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    NE         shift, and go to state 55
    EQ         shift, and go to state 56


State 37

   44 exp: NAME LEFT_PAR • args RIGHT_PAR

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    $default  reduce using rule 46 (args)

    exp    go to state 33
    args   go to state 65
    argss  go to state 35


State 38

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp
   43    | LEFT_PAR exp • RIGHT_PAR

    RIGHT_PAR  shift, and go to state 66
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    MUL        shift, and go to state 43
    DIV        shift, and go to state 44
    REM        shift, and go to state 45
    BOR        shift, and go to state 46
    BAND       shift, and go to state 47
    AND        shift, and go to state 48
    OR         shift, and go to state 49
    XOR        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    NE         shift, and go to state 55
    EQ         shift, and go to state 56


State 39

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp
   42    | NOT exp •

    $default  reduce using rule 42 (exp)


State 40

   15 stmt: RETURN exp SEMICOLON •

    $default  reduce using rule 15 (stmt)


State 41

   28 exp: exp PLUS • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 67


State 42

   29 exp: exp MINUS • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 68


State 43

   30 exp: exp MUL • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 69


State 44

   31 exp: exp DIV • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 70


State 45

   32 exp: exp REM • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 71


State 46

   39 exp: exp BOR • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 72


State 47

   38 exp: exp BAND • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 73


State 48

   40 exp: exp AND • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 74


State 49

   41 exp: exp OR • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 75


State 50

   33 exp: exp XOR • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 76


State 51

   36 exp: exp LT • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 77


State 52

   37 exp: exp LE • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 78


State 53

   34 exp: exp GT • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 79


State 54

   35 exp: exp GE • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 80


State 55

   26 exp: exp NE • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 81


State 56

   27 exp: exp EQ • exp

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp  go to state 82


State 57

    7 func: FUN NAME TYPE • LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC vars stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 83


State 58

   21 stmt: REPEAT LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    RIGHT_PAR  shift, and go to state 84
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    MUL        shift, and go to state 43
    DIV        shift, and go to state 44
    REM        shift, and go to state 45
    BOR        shift, and go to state 46
    BAND       shift, and go to state 47
    AND        shift, and go to state 48
    OR         shift, and go to state 49
    XOR        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    NE         shift, and go to state 55
    EQ         shift, and go to state 56


State 59

   17 stmt: IF LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   18     | IF LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC
   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    RIGHT_PAR  shift, and go to state 85
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    MUL        shift, and go to state 43
    DIV        shift, and go to state 44
    REM        shift, and go to state 45
    BOR        shift, and go to state 46
    BAND       shift, and go to state 47
    AND        shift, and go to state 48
    OR         shift, and go to state 49
    XOR        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    NE         shift, and go to state 55
    EQ         shift, and go to state 56


State 60

   19 stmt: WHILE LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   20     | WHILE LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC
   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    RIGHT_PAR  shift, and go to state 86
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    MUL        shift, and go to state 43
    DIV        shift, and go to state 44
    REM        shift, and go to state 45
    BOR        shift, and go to state 46
    BAND       shift, and go to state 47
    AND        shift, and go to state 48
    OR         shift, and go to state 49
    XOR        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    NE         shift, and go to state 55
    EQ         shift, and go to state 56


State 61

    4 var: VAR NAME TYPE ASSIGN exp • SEMICOLON
   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    SEMICOLON  shift, and go to state 87
    PLUS       shift, and go to state 41
    MINUS      shift, and go to state 42
    MUL        shift, and go to state 43
    DIV        shift, and go to state 44
    REM        shift, and go to state 45
    BOR        shift, and go to state 46
    BAND       shift, and go to state 47
    AND        shift, and go to state 48
    OR         shift, and go to state 49
    XOR        shift, and go to state 50
    LT         shift, and go to state 51
    LE         shift, and go to state 52
    GT         shift, and go to state 53
    GE         shift, and go to state 54
    NE         shift, and go to state 55
    EQ         shift, and go to state 56


State 62

   49 argss: exp COMMA • argss

    INT_CONSTANT  shift, and go to state 20
    NAME          shift, and go to state 21
    STRING        shift, and go to state 22
    LEFT_PAR      shift, and go to state 24
    NOT           shift, and go to state 25

    exp    go to state 33
    argss  go to state 88


State 63

   23 stmt: NAME LEFT_PAR args RIGHT_PAR • SEMICOLON

    SEMICOLON  shift, and go to state 89


State 64

   22 stmt: NAME ASSIGN exp SEMICOLON •

    $default  reduce using rule 22 (stmt)


State 65

   44 exp: NAME LEFT_PAR args • RIGHT_PAR

    RIGHT_PAR  shift, and go to state 90


State 66

   43 exp: LEFT_PAR exp RIGHT_PAR •

    $default  reduce using rule 43 (exp)


State 67

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   28    | exp PLUS exp •
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    MUL  shift, and go to state 43
    DIV  shift, and go to state 44
    REM  shift, and go to state 45

    $default  reduce using rule 28 (exp)


State 68

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   29    | exp MINUS exp •
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    MUL  shift, and go to state 43
    DIV  shift, and go to state 44
    REM  shift, and go to state 45

    $default  reduce using rule 29 (exp)


State 69

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   30    | exp MUL exp •
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    $default  reduce using rule 30 (exp)


State 70

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   31    | exp DIV exp •
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    $default  reduce using rule 31 (exp)


State 71

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   32    | exp REM exp •
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    $default  reduce using rule 32 (exp)


State 72

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   39    | exp BOR exp •
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    BAND   shift, and go to state 47
    XOR    shift, and go to state 50
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54
    NE     shift, and go to state 55
    EQ     shift, and go to state 56

    $default  reduce using rule 39 (exp)


State 73

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   38    | exp BAND exp •
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54
    NE     shift, and go to state 55
    EQ     shift, and go to state 56

    $default  reduce using rule 38 (exp)


State 74

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   40    | exp AND exp •
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    BOR    shift, and go to state 46
    BAND   shift, and go to state 47
    XOR    shift, and go to state 50
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54
    NE     shift, and go to state 55
    EQ     shift, and go to state 56

    $default  reduce using rule 40 (exp)


State 75

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp
   41    | exp OR exp •

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    BOR    shift, and go to state 46
    BAND   shift, and go to state 47
    AND    shift, and go to state 48
    XOR    shift, and go to state 50
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54
    NE     shift, and go to state 55
    EQ     shift, and go to state 56

    $default  reduce using rule 41 (exp)


State 76

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   33    | exp XOR exp •
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    BAND   shift, and go to state 47
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54
    NE     shift, and go to state 55
    EQ     shift, and go to state 56

    $default  reduce using rule 33 (exp)


State 77

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   36    | exp LT exp •
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45

    $default  reduce using rule 36 (exp)


State 78

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   37    | exp LE exp •
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45

    $default  reduce using rule 37 (exp)


State 79

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   34    | exp GT exp •
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45

    $default  reduce using rule 34 (exp)


State 80

   26 exp: exp • NE exp
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   35    | exp GE exp •
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45

    $default  reduce using rule 35 (exp)


State 81

   26 exp: exp • NE exp
   26    | exp NE exp •
   27    | exp • EQ exp
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54

    $default  reduce using rule 26 (exp)


State 82

   26 exp: exp • NE exp
   27    | exp • EQ exp
   27    | exp EQ exp •
   28    | exp • PLUS exp
   29    | exp • MINUS exp
   30    | exp • MUL exp
   31    | exp • DIV exp
   32    | exp • REM exp
   33    | exp • XOR exp
   34    | exp • GT exp
   35    | exp • GE exp
   36    | exp • LT exp
   37    | exp • LE exp
   38    | exp • BAND exp
   39    | exp • BOR exp
   40    | exp • AND exp
   41    | exp • OR exp

    PLUS   shift, and go to state 41
    MINUS  shift, and go to state 42
    MUL    shift, and go to state 43
    DIV    shift, and go to state 44
    REM    shift, and go to state 45
    LT     shift, and go to state 51
    LE     shift, and go to state 52
    GT     shift, and go to state 53
    GE     shift, and go to state 54

    $default  reduce using rule 27 (exp)


State 83

    7 func: FUN NAME TYPE LEFT_PAR • argdecls RIGHT_PAR LEFT_BRAC vars stmts RIGHT_BRAC

    NAME  shift, and go to state 91

    $default  reduce using rule 8 (argdecls)

    argdecls   go to state 92
    argdeclss  go to state 93
    argdecl    go to state 94


State 84

   21 stmt: REPEAT LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 95


State 85

   17 stmt: IF LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC
   18     | IF LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 96


State 86

   19 stmt: WHILE LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC
   20     | WHILE LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 97


State 87

    4 var: VAR NAME TYPE ASSIGN exp SEMICOLON •

    $default  reduce using rule 4 (var)


State 88

   49 argss: exp COMMA argss •

    $default  reduce using rule 49 (argss)


State 89

   23 stmt: NAME LEFT_PAR args RIGHT_PAR SEMICOLON •

    $default  reduce using rule 23 (stmt)


State 90

   44 exp: NAME LEFT_PAR args RIGHT_PAR •

    $default  reduce using rule 44 (exp)


State 91

   12 argdecl: NAME • TYPE

    TYPE  shift, and go to state 98


State 92

    7 func: FUN NAME TYPE LEFT_PAR argdecls • RIGHT_PAR LEFT_BRAC vars stmts RIGHT_BRAC

    RIGHT_PAR  shift, and go to state 99


State 93

    9 argdecls: argdeclss •

    $default  reduce using rule 9 (argdecls)


State 94

   10 argdeclss: argdecl •
   11          | argdecl • COMMA argdeclss

    COMMA  shift, and go to state 100

    $default  reduce using rule 10 (argdeclss)


State 95

   21 stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    stmts  go to state 101
    stmt   go to state 16


State 96

   17 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC
   18     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    stmts  go to state 102
    stmt   go to state 16


State 97

   19 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC
   20     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    stmts  go to state 103
    stmt   go to state 16


State 98

   12 argdecl: NAME TYPE •

    $default  reduce using rule 12 (argdecl)


State 99

    7 func: FUN NAME TYPE LEFT_PAR argdecls RIGHT_PAR • LEFT_BRAC vars stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 104


State 100

   11 argdeclss: argdecl COMMA • argdeclss

    NAME  shift, and go to state 91

    argdeclss  go to state 105
    argdecl    go to state 94


State 101

   13 stmts: stmts • stmt
   21 stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC

    NAME        shift, and go to state 8
    RETURN      shift, and go to state 9
    REPEAT      shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    RIGHT_BRAC  shift, and go to state 106

    stmt  go to state 31


State 102

   13 stmts: stmts • stmt
   17 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC
   18     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    NAME        shift, and go to state 8
    RETURN      shift, and go to state 9
    REPEAT      shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    RIGHT_BRAC  shift, and go to state 107

    stmt  go to state 31


State 103

   13 stmts: stmts • stmt
   19 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC
   20     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    NAME        shift, and go to state 8
    RETURN      shift, and go to state 9
    REPEAT      shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    RIGHT_BRAC  shift, and go to state 108

    stmt  go to state 31


State 104

    7 func: FUN NAME TYPE LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC • vars stmts RIGHT_BRAC

    $default  reduce using rule 3 (vars)

    vars  go to state 109


State 105

   11 argdeclss: argdecl COMMA argdeclss •

    $default  reduce using rule 11 (argdeclss)


State 106

   21 stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC •

    $default  reduce using rule 21 (stmt)


State 107

   17 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC •
   18     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC • ELSE LEFT_BRAC stmts RIGHT_BRAC

    ELSE  shift, and go to state 110

    $default  reduce using rule 17 (stmt)


State 108

   19 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC •
   20     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC • OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    OTHERWISE  shift, and go to state 111

    $default  reduce using rule 19 (stmt)


State 109

    2 vars: vars • var
    7 func: FUN NAME TYPE LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC vars • stmts RIGHT_BRAC

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    VAR     shift, and go to state 4
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    var    go to state 5
    stmts  go to state 112
    stmt   go to state 16


State 110

   18 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE • LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 113


State 111

   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE • LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 114


State 112

    7 func: FUN NAME TYPE LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC vars stmts • RIGHT_BRAC
   13 stmts: stmts • stmt

    NAME        shift, and go to state 8
    RETURN      shift, and go to state 9
    REPEAT      shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    RIGHT_BRAC  shift, and go to state 115

    stmt  go to state 31


State 113

   18 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC • stmts RIGHT_BRAC

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    stmts  go to state 116
    stmt   go to state 16


State 114

   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC • stmts RIGHT_BRAC

    NAME    shift, and go to state 8
    RETURN  shift, and go to state 9
    REPEAT  shift, and go to state 11
    IF      shift, and go to state 12
    WHILE   shift, and go to state 13

    stmts  go to state 117
    stmt   go to state 16


State 115

    7 func: FUN NAME TYPE LEFT_PAR argdecls RIGHT_PAR LEFT_BRAC vars stmts RIGHT_BRAC •

    $default  reduce using rule 7 (func)


State 116

   13 stmts: stmts • stmt
   18 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts • RIGHT_BRAC

    NAME        shift, and go to state 8
    RETURN      shift, and go to state 9
    REPEAT      shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    RIGHT_BRAC  shift, and go to state 118

    stmt  go to state 31


State 117

   13 stmts: stmts • stmt
   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts • RIGHT_BRAC

    NAME        shift, and go to state 8
    RETURN      shift, and go to state 9
    REPEAT      shift, and go to state 11
    IF          shift, and go to state 12
    WHILE       shift, and go to state 13
    RIGHT_BRAC  shift, and go to state 119

    stmt  go to state 31


State 118

   18 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC •

    $default  reduce using rule 18 (stmt)


State 119

   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC •

    $default  reduce using rule 20 (stmt)
