Nonterminals useless in grammar

    stmts


Rules useless in parser due to conflicts

    2 stmt: stmt


State 3 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: stmt

    2 stmt: stmt
    3     | ε
    4     | RETURN exp SEMICOLON

    5 exp: INT_CONSTANT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_CONSTANT <ival> (258) 5
    RETURN (259) 4
    SEMICOLON (260) 4


Nonterminals, with rules where they appear

    $accept (6)
        on left: 0
    program (7)
        on left: 1
        on right: 0
    stmt <stmt> (8)
        on left: 2 3 4
        on right: 1 2
    exp <exp> (9)
        on left: 5
        on right: 4


State 0

    0 $accept: • program $end

    RETURN  shift, and go to state 1

    $default  reduce using rule 3 (stmt)

    program  go to state 2
    stmt     go to state 3


State 1

    4 stmt: RETURN • exp SEMICOLON

    INT_CONSTANT  shift, and go to state 4

    exp  go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: stmt •
    2 stmt: stmt •

    $end      reduce using rule 1 (program)
    $end      [reduce using rule 2 (stmt)]
    $default  reduce using rule 1 (program)


State 4

    5 exp: INT_CONSTANT •

    $default  reduce using rule 5 (exp)


State 5

    4 stmt: RETURN exp • SEMICOLON

    SEMICOLON  shift, and go to state 7


State 6

    0 $accept: program $end •

    $default  accept


State 7

    4 stmt: RETURN exp SEMICOLON •

    $default  reduce using rule 4 (stmt)
