Terminals unused in grammar

    LEFT_SQR_BRAC
    RIGHT_SQR_BRAC


Grammar

    0 $accept: program $end

    1 program: vars funs stmts
    2        | vars funs
    3        | funs stmts
    4        | vars stmts
    5        | funs
    6        | vars
    7        | stmts

    8 stmts: stmts stmt
    9      | stmt

   10 l_stmts: l_stmts l_stmt
   11        | l_stmt

   12 vars: vars var
   13     | var

   14 funs: funs fun
   15     | fun

   16 stmt: RETURN exp SEMICOLON
   17     | RETURN SEMICOLON
   18     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   19     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC
   20     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   21     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC
   22     | REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   23     | NAME ASSIGN exp SEMICOLON

   24 var: VAR NAME TYPE ASSIGN exp SEMICOLON

   25 fun: FUN NAME TYPE arg LEFT_BRAC l_stmts RIGHT_BRAC

   26 l_stmt: RETURN exp SEMICOLON
   27       | RETURN SEMICOLON
   28       | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   29       | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC
   30       | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   31       | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC
   32       | REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   33       | NAME ASSIGN exp SEMICOLON
   34       | VAR NAME TYPE ASSIGN exp SEMICOLON

   35 arg: LEFT_PAR RIGHT_PAR
   36    | LEFT_PAR arg RIGHT_PAR
   37    | NAME TYPE COMMA arg
   38    | NAME TYPE

   39 exp: INT_CONSTANT
   40    | NOT exp
   41    | exp MUL exp
   42    | exp DIV exp
   43    | exp REM exp
   44    | exp PLUS exp
   45    | exp MINUS exp
   46    | exp LT exp
   47    | exp LE exp
   48    | exp GT exp
   49    | exp GE exp
   50    | exp EQ exp
   51    | exp NE exp
   52    | exp BAND exp
   53    | exp XOR exp
   54    | exp BOR exp
   55    | exp AND exp
   56    | exp OR exp
   57    | LEFT_PAR exp RIGHT_PAR
   58    | NAME
   59    | STRING


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT_CONSTANT <ival> (258) 39
    NAME <varName> (259) 23 24 25 33 34 37 38 58
    TYPE <varType> (260) 24 25 34 37 38
    STRING <string> (261) 59
    RETURN (262) 16 17 26 27
    SEMICOLON (263) 16 17 23 24 26 27 33 34
    VAR (264) 24 34
    FUN (265) 25
    REPEAT (266) 22 32
    IF (267) 18 19 28 29
    ELSE (268) 19 29
    WHILE (269) 20 21 30 31
    OTHERWISE (270) 21 31
    LEFT_PAR (271) 18 19 20 21 22 28 29 30 31 32 35 36 57
    RIGHT_PAR (272) 18 19 20 21 22 28 29 30 31 32 35 36 57
    LEFT_BRAC (273) 18 19 20 21 22 25 28 29 30 31 32
    RIGHT_BRAC (274) 18 19 20 21 22 25 28 29 30 31 32
    LEFT_SQR_BRAC (275)
    RIGHT_SQR_BRAC (276)
    PLUS (277) 44
    MINUS (278) 45
    MUL (279) 41
    DIV (280) 42
    REM (281) 43
    BOR (282) 54
    COMMA (283) 37
    BAND (284) 52
    AND (285) 55
    OR (286) 56
    XOR (287) 53
    LT (288) 46
    LE (289) 47
    GT (290) 48
    GE (291) 49
    NE (292) 51
    EQ (293) 50
    NOT (294) 40
    ASSIGN (295) 23 24 33 34


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    program (42)
        on left: 1 2 3 4 5 6 7
        on right: 0
    stmts <stmts> (43)
        on left: 8 9
        on right: 1 3 4 7 8 18 19 20 21 22
    l_stmts <l_stmts> (44)
        on left: 10 11
        on right: 10 25 28 29 30 31 32
    vars <vars> (45)
        on left: 12 13
        on right: 1 2 4 6 12
    funs <funs> (46)
        on left: 14 15
        on right: 1 2 3 5 14
    stmt <stmt> (47)
        on left: 16 17 18 19 20 21 22 23
        on right: 8 9
    var <vars> (48)
        on left: 24
        on right: 12 13
    fun <fun> (49)
        on left: 25
        on right: 14 15
    l_stmt <l_stmt> (50)
        on left: 26 27 28 29 30 31 32 33 34
        on right: 10 11
    arg <arg> (51)
        on left: 35 36 37 38
        on right: 25 36 37
    exp <exp> (52)
        on left: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
        on right: 16 18 19 20 21 22 23 24 26 28 29 30 31 32 33 34 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57


State 0

    0 $accept: • program $end

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    VAR     shift, and go to state 3
    FUN     shift, and go to state 4
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    program  go to state 8
    stmts    go to state 9
    vars     go to state 10
    funs     go to state 11
    stmt     go to state 12
    var      go to state 13
    fun      go to state 14


State 1

   23 stmt: NAME • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 15


State 2

   16 stmt: RETURN • exp SEMICOLON
   17     | RETURN • SEMICOLON

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 22


State 3

   24 var: VAR • NAME TYPE ASSIGN exp SEMICOLON

    NAME  shift, and go to state 23


State 4

   25 fun: FUN • NAME TYPE arg LEFT_BRAC l_stmts RIGHT_BRAC

    NAME  shift, and go to state 24


State 5

   22 stmt: REPEAT • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 25


State 6

   18 stmt: IF • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   19     | IF • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 26


State 7

   20 stmt: WHILE • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   21     | WHILE • LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 27


State 8

    0 $accept: program • $end

    $end  shift, and go to state 28


State 9

    7 program: stmts •
    8 stmts: stmts • stmt

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 7 (program)

    stmt  go to state 29


State 10

    1 program: vars • funs stmts
    2        | vars • funs
    4        | vars • stmts
    6        | vars •
   12 vars: vars • var

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    VAR     shift, and go to state 3
    FUN     shift, and go to state 4
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 6 (program)

    stmts  go to state 30
    funs   go to state 31
    stmt   go to state 12
    var    go to state 32
    fun    go to state 14


State 11

    3 program: funs • stmts
    5        | funs •
   14 funs: funs • fun

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    FUN     shift, and go to state 4
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 5 (program)

    stmts  go to state 33
    stmt   go to state 12
    fun    go to state 34


State 12

    9 stmts: stmt •

    $default  reduce using rule 9 (stmts)


State 13

   13 vars: var •

    $default  reduce using rule 13 (vars)


State 14

   15 funs: fun •

    $default  reduce using rule 15 (funs)


State 15

   23 stmt: NAME ASSIGN • exp SEMICOLON

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 35


State 16

   39 exp: INT_CONSTANT •

    $default  reduce using rule 39 (exp)


State 17

   58 exp: NAME •

    $default  reduce using rule 58 (exp)


State 18

   59 exp: STRING •

    $default  reduce using rule 59 (exp)


State 19

   17 stmt: RETURN SEMICOLON •

    $default  reduce using rule 17 (stmt)


State 20

   57 exp: LEFT_PAR • exp RIGHT_PAR

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 36


State 21

   40 exp: NOT • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 37


State 22

   16 stmt: RETURN exp • SEMICOLON
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    SEMICOLON  shift, and go to state 38
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 23

   24 var: VAR NAME • TYPE ASSIGN exp SEMICOLON

    TYPE  shift, and go to state 55


State 24

   25 fun: FUN NAME • TYPE arg LEFT_BRAC l_stmts RIGHT_BRAC

    TYPE  shift, and go to state 56


State 25

   22 stmt: REPEAT LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 57


State 26

   18 stmt: IF LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   19     | IF LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 58


State 27

   20 stmt: WHILE LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   21     | WHILE LEFT_PAR • exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 59


State 28

    0 $accept: program $end •

    $default  accept


State 29

    8 stmts: stmts stmt •

    $default  reduce using rule 8 (stmts)


State 30

    4 program: vars stmts •
    8 stmts: stmts • stmt

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 4 (program)

    stmt  go to state 29


State 31

    1 program: vars funs • stmts
    2        | vars funs •
   14 funs: funs • fun

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    FUN     shift, and go to state 4
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 2 (program)

    stmts  go to state 60
    stmt   go to state 12
    fun    go to state 34


State 32

   12 vars: vars var •

    $default  reduce using rule 12 (vars)


State 33

    3 program: funs stmts •
    8 stmts: stmts • stmt

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 3 (program)

    stmt  go to state 29


State 34

   14 funs: funs fun •

    $default  reduce using rule 14 (funs)


State 35

   23 stmt: NAME ASSIGN exp • SEMICOLON
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    SEMICOLON  shift, and go to state 61
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 36

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp
   57    | LEFT_PAR exp • RIGHT_PAR

    RIGHT_PAR  shift, and go to state 62
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 37

   40 exp: NOT exp •
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    $default  reduce using rule 40 (exp)


State 38

   16 stmt: RETURN exp SEMICOLON •

    $default  reduce using rule 16 (stmt)


State 39

   44 exp: exp PLUS • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 63


State 40

   45 exp: exp MINUS • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 64


State 41

   41 exp: exp MUL • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 65


State 42

   42 exp: exp DIV • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 66


State 43

   43 exp: exp REM • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 67


State 44

   54 exp: exp BOR • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 68


State 45

   52 exp: exp BAND • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 69


State 46

   55 exp: exp AND • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 70


State 47

   56 exp: exp OR • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 71


State 48

   53 exp: exp XOR • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 72


State 49

   46 exp: exp LT • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 73


State 50

   47 exp: exp LE • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 74


State 51

   48 exp: exp GT • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 75


State 52

   49 exp: exp GE • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 76


State 53

   51 exp: exp NE • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 77


State 54

   50 exp: exp EQ • exp

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 78


State 55

   24 var: VAR NAME TYPE • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 79


State 56

   25 fun: FUN NAME TYPE • arg LEFT_BRAC l_stmts RIGHT_BRAC

    NAME      shift, and go to state 80
    LEFT_PAR  shift, and go to state 81

    arg  go to state 82


State 57

   22 stmt: REPEAT LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    RIGHT_PAR  shift, and go to state 83
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 58

   18 stmt: IF LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   19     | IF LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    RIGHT_PAR  shift, and go to state 84
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 59

   20 stmt: WHILE LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC
   21     | WHILE LEFT_PAR exp • RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    RIGHT_PAR  shift, and go to state 85
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 60

    1 program: vars funs stmts •
    8 stmts: stmts • stmt

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 1 (program)

    stmt  go to state 29


State 61

   23 stmt: NAME ASSIGN exp SEMICOLON •

    $default  reduce using rule 23 (stmt)


State 62

   57 exp: LEFT_PAR exp RIGHT_PAR •

    $default  reduce using rule 57 (exp)


State 63

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   44    | exp PLUS exp •
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    MUL  shift, and go to state 41
    DIV  shift, and go to state 42
    REM  shift, and go to state 43

    $default  reduce using rule 44 (exp)


State 64

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   45    | exp MINUS exp •
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    MUL  shift, and go to state 41
    DIV  shift, and go to state 42
    REM  shift, and go to state 43

    $default  reduce using rule 45 (exp)


State 65

   41 exp: exp • MUL exp
   41    | exp MUL exp •
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    $default  reduce using rule 41 (exp)


State 66

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   42    | exp DIV exp •
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    $default  reduce using rule 42 (exp)


State 67

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   43    | exp REM exp •
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    $default  reduce using rule 43 (exp)


State 68

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   54    | exp BOR exp •
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43
    BAND   shift, and go to state 45
    XOR    shift, and go to state 48
    LT     shift, and go to state 49
    LE     shift, and go to state 50
    GT     shift, and go to state 51
    GE     shift, and go to state 52
    NE     shift, and go to state 53
    EQ     shift, and go to state 54

    $default  reduce using rule 54 (exp)


State 69

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   52    | exp BAND exp •
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43
    LT     shift, and go to state 49
    LE     shift, and go to state 50
    GT     shift, and go to state 51
    GE     shift, and go to state 52
    NE     shift, and go to state 53
    EQ     shift, and go to state 54

    $default  reduce using rule 52 (exp)


State 70

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   55    | exp AND exp •
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43
    BOR    shift, and go to state 44
    BAND   shift, and go to state 45
    XOR    shift, and go to state 48
    LT     shift, and go to state 49
    LE     shift, and go to state 50
    GT     shift, and go to state 51
    GE     shift, and go to state 52
    NE     shift, and go to state 53
    EQ     shift, and go to state 54

    $default  reduce using rule 55 (exp)


State 71

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp
   56    | exp OR exp •

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43
    BOR    shift, and go to state 44
    BAND   shift, and go to state 45
    AND    shift, and go to state 46
    XOR    shift, and go to state 48
    LT     shift, and go to state 49
    LE     shift, and go to state 50
    GT     shift, and go to state 51
    GE     shift, and go to state 52
    NE     shift, and go to state 53
    EQ     shift, and go to state 54

    $default  reduce using rule 56 (exp)


State 72

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   53    | exp XOR exp •
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43
    BAND   shift, and go to state 45
    LT     shift, and go to state 49
    LE     shift, and go to state 50
    GT     shift, and go to state 51
    GE     shift, and go to state 52
    NE     shift, and go to state 53
    EQ     shift, and go to state 54

    $default  reduce using rule 53 (exp)


State 73

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   46    | exp LT exp •
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43

    $default  reduce using rule 46 (exp)


State 74

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   47    | exp LE exp •
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43

    $default  reduce using rule 47 (exp)


State 75

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   48    | exp GT exp •
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43

    $default  reduce using rule 48 (exp)


State 76

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   49    | exp GE exp •
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43

    $default  reduce using rule 49 (exp)


State 77

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   51    | exp NE exp •
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43
    LT     shift, and go to state 49
    LE     shift, and go to state 50
    GT     shift, and go to state 51
    GE     shift, and go to state 52

    $default  reduce using rule 51 (exp)


State 78

   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   50    | exp EQ exp •
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    MUL    shift, and go to state 41
    DIV    shift, and go to state 42
    REM    shift, and go to state 43
    LT     shift, and go to state 49
    LE     shift, and go to state 50
    GT     shift, and go to state 51
    GE     shift, and go to state 52

    $default  reduce using rule 50 (exp)


State 79

   24 var: VAR NAME TYPE ASSIGN • exp SEMICOLON

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 86


State 80

   37 arg: NAME • TYPE COMMA arg
   38    | NAME • TYPE

    TYPE  shift, and go to state 87


State 81

   35 arg: LEFT_PAR • RIGHT_PAR
   36    | LEFT_PAR • arg RIGHT_PAR

    NAME       shift, and go to state 80
    LEFT_PAR   shift, and go to state 81
    RIGHT_PAR  shift, and go to state 88

    arg  go to state 89


State 82

   25 fun: FUN NAME TYPE arg • LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 90


State 83

   22 stmt: REPEAT LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 91


State 84

   18 stmt: IF LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC
   19     | IF LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 92


State 85

   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC
   21     | WHILE LEFT_PAR exp RIGHT_PAR • LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 93


State 86

   24 var: VAR NAME TYPE ASSIGN exp • SEMICOLON
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    SEMICOLON  shift, and go to state 94
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 87

   37 arg: NAME TYPE • COMMA arg
   38    | NAME TYPE •

    COMMA  shift, and go to state 95

    $default  reduce using rule 38 (arg)


State 88

   35 arg: LEFT_PAR RIGHT_PAR •

    $default  reduce using rule 35 (arg)


State 89

   36 arg: LEFT_PAR arg • RIGHT_PAR

    RIGHT_PAR  shift, and go to state 96


State 90

   25 fun: FUN NAME TYPE arg LEFT_BRAC • l_stmts RIGHT_BRAC

    NAME    shift, and go to state 97
    RETURN  shift, and go to state 98
    VAR     shift, and go to state 99
    REPEAT  shift, and go to state 100
    IF      shift, and go to state 101
    WHILE   shift, and go to state 102

    l_stmts  go to state 103
    l_stmt   go to state 104


State 91

   22 stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    stmts  go to state 105
    stmt   go to state 12


State 92

   18 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC
   19     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    stmts  go to state 106
    stmt   go to state 12


State 93

   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC
   21     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC • stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    stmts  go to state 107
    stmt   go to state 12


State 94

   24 var: VAR NAME TYPE ASSIGN exp SEMICOLON •

    $default  reduce using rule 24 (var)


State 95

   37 arg: NAME TYPE COMMA • arg

    NAME      shift, and go to state 80
    LEFT_PAR  shift, and go to state 81

    arg  go to state 108


State 96

   36 arg: LEFT_PAR arg RIGHT_PAR •

    $default  reduce using rule 36 (arg)


State 97

   33 l_stmt: NAME • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 109


State 98

   26 l_stmt: RETURN • exp SEMICOLON
   27       | RETURN • SEMICOLON

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    SEMICOLON     shift, and go to state 110
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 111


State 99

   34 l_stmt: VAR • NAME TYPE ASSIGN exp SEMICOLON

    NAME  shift, and go to state 112


State 100

   32 l_stmt: REPEAT • LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 113


State 101

   28 l_stmt: IF • LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   29       | IF • LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 114


State 102

   30 l_stmt: WHILE • LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   31       | WHILE • LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_PAR  shift, and go to state 115


State 103

   10 l_stmts: l_stmts • l_stmt
   25 fun: FUN NAME TYPE arg LEFT_BRAC l_stmts • RIGHT_BRAC

    NAME        shift, and go to state 97
    RETURN      shift, and go to state 98
    VAR         shift, and go to state 99
    REPEAT      shift, and go to state 100
    IF          shift, and go to state 101
    WHILE       shift, and go to state 102
    RIGHT_BRAC  shift, and go to state 116

    l_stmt  go to state 117


State 104

   11 l_stmts: l_stmt •

    $default  reduce using rule 11 (l_stmts)


State 105

    8 stmts: stmts • stmt
   22 stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC

    NAME        shift, and go to state 1
    RETURN      shift, and go to state 2
    REPEAT      shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RIGHT_BRAC  shift, and go to state 118

    stmt  go to state 29


State 106

    8 stmts: stmts • stmt
   18 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC
   19     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC

    NAME        shift, and go to state 1
    RETURN      shift, and go to state 2
    REPEAT      shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RIGHT_BRAC  shift, and go to state 119

    stmt  go to state 29


State 107

    8 stmts: stmts • stmt
   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC
   21     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts • RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    NAME        shift, and go to state 1
    RETURN      shift, and go to state 2
    REPEAT      shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RIGHT_BRAC  shift, and go to state 120

    stmt  go to state 29


State 108

   37 arg: NAME TYPE COMMA arg •

    $default  reduce using rule 37 (arg)


State 109

   33 l_stmt: NAME ASSIGN • exp SEMICOLON

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 121


State 110

   27 l_stmt: RETURN SEMICOLON •

    $default  reduce using rule 27 (l_stmt)


State 111

   26 l_stmt: RETURN exp • SEMICOLON
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    SEMICOLON  shift, and go to state 122
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 112

   34 l_stmt: VAR NAME • TYPE ASSIGN exp SEMICOLON

    TYPE  shift, and go to state 123


State 113

   32 l_stmt: REPEAT LEFT_PAR • exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 124


State 114

   28 l_stmt: IF LEFT_PAR • exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   29       | IF LEFT_PAR • exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 125


State 115

   30 l_stmt: WHILE LEFT_PAR • exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   31       | WHILE LEFT_PAR • exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 126


State 116

   25 fun: FUN NAME TYPE arg LEFT_BRAC l_stmts RIGHT_BRAC •

    $default  reduce using rule 25 (fun)


State 117

   10 l_stmts: l_stmts l_stmt •

    $default  reduce using rule 10 (l_stmts)


State 118

   22 stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC •

    $default  reduce using rule 22 (stmt)


State 119

   18 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC •
   19     | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC • ELSE LEFT_BRAC stmts RIGHT_BRAC

    ELSE  shift, and go to state 127

    $default  reduce using rule 18 (stmt)


State 120

   20 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC •
   21     | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC • OTHERWISE LEFT_BRAC stmts RIGHT_BRAC

    OTHERWISE  shift, and go to state 128

    $default  reduce using rule 20 (stmt)


State 121

   33 l_stmt: NAME ASSIGN exp • SEMICOLON
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    SEMICOLON  shift, and go to state 129
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 122

   26 l_stmt: RETURN exp SEMICOLON •

    $default  reduce using rule 26 (l_stmt)


State 123

   34 l_stmt: VAR NAME TYPE • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 130


State 124

   32 l_stmt: REPEAT LEFT_PAR exp • RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    RIGHT_PAR  shift, and go to state 131
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 125

   28 l_stmt: IF LEFT_PAR exp • RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   29       | IF LEFT_PAR exp • RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    RIGHT_PAR  shift, and go to state 132
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 126

   30 l_stmt: WHILE LEFT_PAR exp • RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC
   31       | WHILE LEFT_PAR exp • RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    RIGHT_PAR  shift, and go to state 133
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 127

   19 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE • LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 134


State 128

   21 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE • LEFT_BRAC stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 135


State 129

   33 l_stmt: NAME ASSIGN exp SEMICOLON •

    $default  reduce using rule 33 (l_stmt)


State 130

   34 l_stmt: VAR NAME TYPE ASSIGN • exp SEMICOLON

    INT_CONSTANT  shift, and go to state 16
    NAME          shift, and go to state 17
    STRING        shift, and go to state 18
    LEFT_PAR      shift, and go to state 20
    NOT           shift, and go to state 21

    exp  go to state 136


State 131

   32 l_stmt: REPEAT LEFT_PAR exp RIGHT_PAR • LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 137


State 132

   28 l_stmt: IF LEFT_PAR exp RIGHT_PAR • LEFT_BRAC l_stmts RIGHT_BRAC
   29       | IF LEFT_PAR exp RIGHT_PAR • LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 138


State 133

   30 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR • LEFT_BRAC l_stmts RIGHT_BRAC
   31       | WHILE LEFT_PAR exp RIGHT_PAR • LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 139


State 134

   19 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC • stmts RIGHT_BRAC

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    stmts  go to state 140
    stmt   go to state 12


State 135

   21 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC • stmts RIGHT_BRAC

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 2
    REPEAT  shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7

    stmts  go to state 141
    stmt   go to state 12


State 136

   34 l_stmt: VAR NAME TYPE ASSIGN exp • SEMICOLON
   41 exp: exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • PLUS exp
   45    | exp • MINUS exp
   46    | exp • LT exp
   47    | exp • LE exp
   48    | exp • GT exp
   49    | exp • GE exp
   50    | exp • EQ exp
   51    | exp • NE exp
   52    | exp • BAND exp
   53    | exp • XOR exp
   54    | exp • BOR exp
   55    | exp • AND exp
   56    | exp • OR exp

    SEMICOLON  shift, and go to state 142
    PLUS       shift, and go to state 39
    MINUS      shift, and go to state 40
    MUL        shift, and go to state 41
    DIV        shift, and go to state 42
    REM        shift, and go to state 43
    BOR        shift, and go to state 44
    BAND       shift, and go to state 45
    AND        shift, and go to state 46
    OR         shift, and go to state 47
    XOR        shift, and go to state 48
    LT         shift, and go to state 49
    LE         shift, and go to state 50
    GT         shift, and go to state 51
    GE         shift, and go to state 52
    NE         shift, and go to state 53
    EQ         shift, and go to state 54


State 137

   32 l_stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC • l_stmts RIGHT_BRAC

    NAME    shift, and go to state 97
    RETURN  shift, and go to state 98
    VAR     shift, and go to state 99
    REPEAT  shift, and go to state 100
    IF      shift, and go to state 101
    WHILE   shift, and go to state 102

    l_stmts  go to state 143
    l_stmt   go to state 104


State 138

   28 l_stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC • l_stmts RIGHT_BRAC
   29       | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC • l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC

    NAME    shift, and go to state 97
    RETURN  shift, and go to state 98
    VAR     shift, and go to state 99
    REPEAT  shift, and go to state 100
    IF      shift, and go to state 101
    WHILE   shift, and go to state 102

    l_stmts  go to state 144
    l_stmt   go to state 104


State 139

   30 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC • l_stmts RIGHT_BRAC
   31       | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC • l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC

    NAME    shift, and go to state 97
    RETURN  shift, and go to state 98
    VAR     shift, and go to state 99
    REPEAT  shift, and go to state 100
    IF      shift, and go to state 101
    WHILE   shift, and go to state 102

    l_stmts  go to state 145
    l_stmt   go to state 104


State 140

    8 stmts: stmts • stmt
   19 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts • RIGHT_BRAC

    NAME        shift, and go to state 1
    RETURN      shift, and go to state 2
    REPEAT      shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RIGHT_BRAC  shift, and go to state 146

    stmt  go to state 29


State 141

    8 stmts: stmts • stmt
   21 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts • RIGHT_BRAC

    NAME        shift, and go to state 1
    RETURN      shift, and go to state 2
    REPEAT      shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RIGHT_BRAC  shift, and go to state 147

    stmt  go to state 29


State 142

   34 l_stmt: VAR NAME TYPE ASSIGN exp SEMICOLON •

    $default  reduce using rule 34 (l_stmt)


State 143

   10 l_stmts: l_stmts • l_stmt
   32 l_stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts • RIGHT_BRAC

    NAME        shift, and go to state 97
    RETURN      shift, and go to state 98
    VAR         shift, and go to state 99
    REPEAT      shift, and go to state 100
    IF          shift, and go to state 101
    WHILE       shift, and go to state 102
    RIGHT_BRAC  shift, and go to state 148

    l_stmt  go to state 117


State 144

   10 l_stmts: l_stmts • l_stmt
   28 l_stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts • RIGHT_BRAC
   29       | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts • RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC

    NAME        shift, and go to state 97
    RETURN      shift, and go to state 98
    VAR         shift, and go to state 99
    REPEAT      shift, and go to state 100
    IF          shift, and go to state 101
    WHILE       shift, and go to state 102
    RIGHT_BRAC  shift, and go to state 149

    l_stmt  go to state 117


State 145

   10 l_stmts: l_stmts • l_stmt
   30 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts • RIGHT_BRAC
   31       | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts • RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC

    NAME        shift, and go to state 97
    RETURN      shift, and go to state 98
    VAR         shift, and go to state 99
    REPEAT      shift, and go to state 100
    IF          shift, and go to state 101
    WHILE       shift, and go to state 102
    RIGHT_BRAC  shift, and go to state 150

    l_stmt  go to state 117


State 146

   19 stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC ELSE LEFT_BRAC stmts RIGHT_BRAC •

    $default  reduce using rule 19 (stmt)


State 147

   21 stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC stmts RIGHT_BRAC OTHERWISE LEFT_BRAC stmts RIGHT_BRAC •

    $default  reduce using rule 21 (stmt)


State 148

   32 l_stmt: REPEAT LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC •

    $default  reduce using rule 32 (l_stmt)


State 149

   28 l_stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC •
   29       | IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC • ELSE LEFT_BRAC l_stmts RIGHT_BRAC

    ELSE  shift, and go to state 151

    $default  reduce using rule 28 (l_stmt)


State 150

   30 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC •
   31       | WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC • OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC

    OTHERWISE  shift, and go to state 152

    $default  reduce using rule 30 (l_stmt)


State 151

   29 l_stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE • LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 153


State 152

   31 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE • LEFT_BRAC l_stmts RIGHT_BRAC

    LEFT_BRAC  shift, and go to state 154


State 153

   29 l_stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC • l_stmts RIGHT_BRAC

    NAME    shift, and go to state 97
    RETURN  shift, and go to state 98
    VAR     shift, and go to state 99
    REPEAT  shift, and go to state 100
    IF      shift, and go to state 101
    WHILE   shift, and go to state 102

    l_stmts  go to state 155
    l_stmt   go to state 104


State 154

   31 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC • l_stmts RIGHT_BRAC

    NAME    shift, and go to state 97
    RETURN  shift, and go to state 98
    VAR     shift, and go to state 99
    REPEAT  shift, and go to state 100
    IF      shift, and go to state 101
    WHILE   shift, and go to state 102

    l_stmts  go to state 156
    l_stmt   go to state 104


State 155

   10 l_stmts: l_stmts • l_stmt
   29 l_stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts • RIGHT_BRAC

    NAME        shift, and go to state 97
    RETURN      shift, and go to state 98
    VAR         shift, and go to state 99
    REPEAT      shift, and go to state 100
    IF          shift, and go to state 101
    WHILE       shift, and go to state 102
    RIGHT_BRAC  shift, and go to state 157

    l_stmt  go to state 117


State 156

   10 l_stmts: l_stmts • l_stmt
   31 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts • RIGHT_BRAC

    NAME        shift, and go to state 97
    RETURN      shift, and go to state 98
    VAR         shift, and go to state 99
    REPEAT      shift, and go to state 100
    IF          shift, and go to state 101
    WHILE       shift, and go to state 102
    RIGHT_BRAC  shift, and go to state 158

    l_stmt  go to state 117


State 157

   29 l_stmt: IF LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC ELSE LEFT_BRAC l_stmts RIGHT_BRAC •

    $default  reduce using rule 29 (l_stmt)


State 158

   31 l_stmt: WHILE LEFT_PAR exp RIGHT_PAR LEFT_BRAC l_stmts RIGHT_BRAC OTHERWISE LEFT_BRAC l_stmts RIGHT_BRAC •

    $default  reduce using rule 31 (l_stmt)
